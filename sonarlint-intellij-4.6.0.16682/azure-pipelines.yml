pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: sonarsource-build-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.8


stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    stageDisplayName: Build and stage to repox
    jobs:
    - job: build
      displayName: Build and stage to repox
      variables:
        GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
      steps:
      - checkout: self
        fetchDepth: 1
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"'
          restoreKeys: gradle
          path: $(GRADLE_USER_HOME)
        displayName: Gradle build cache
      - template: update-gradle-version-steps.yml
      - task: PythonScript@0
        name: fixBranchName
        displayName: 'Compute short branch name for buildInfo'
        inputs:
          scriptSource: 'inline'
          script: |
            branch = "$(Build.SourceBranch)"
            refPrefix = "refs/heads/"
            if branch.startswith(refPrefix):
              fixedBranch = branch[len(refPrefix):]
            else:
              fixedBranch = branch
            # Workaround for https://github.com/Microsoft/azure-pipelines-agent/issues/838
            print("##vso[task.setvariable variable=fixedBranch;isOutput=true]" + fixedBranch)
      - task: Gradle@2
        inputs:
          options: --build-cache --stacktrace -i
          tasks: buildPlugin artifactoryPublish
          publishJUnitResults: false
          jdkVersionOption: '1.11'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          GIT_SHA1: $(Build.SourceVersion)
          GITHUB_BRANCH: $(fixBranchName.fixedBranch)
        displayName: 'Run Gradle build and deploy'
      - task: Gradle@2
        inputs:
          options: --stop
          tasks: c
          publishJUnitResults: false
          jdkVersionOption: '1.11'
        displayName: 'Stop Gradle daemon'
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'validate'
    burgrType: 'validate'
    stageName: 'validate'
    stageDisplayName: Run UTs and trigger SonarQube analysis
    jobs:
    - job: test_windows
      displayName: Run unit tests on Windows
      pool:
        vmImage: 'windows-latest'
      variables:
        GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
      steps:
      - checkout: self
        fetchDepth: 1
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"'
          restoreKeys: gradle
          path: $(GRADLE_USER_HOME)
        displayName: Gradle build cache
      - task: Gradle@2
        inputs:
          options: --build-cache --stacktrace -i
          tasks: check
          publishJUnitResults: true
          testRunTitle: 'UTs on Windows'
          jdkVersionOption: '1.11'
        displayName: 'Run UTs'
      - task: Gradle@2
        inputs:
          options: --stop
          tasks: c
          publishJUnitResults: false
          jdkVersionOption: '1.11'
        displayName: 'Stop Gradle daemon'
    - job: sonarqube
      displayName: SonarQube analysis on Next
      variables:
        GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
      steps:
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"'
          restoreKeys: gradle
          path: $(GRADLE_USER_HOME)
        displayName: Gradle build cache
      - template: prepare-sq-analysis-steps.yml
      - task: Gradle@2
        inputs:
          options: --build-cache --stacktrace -i
          tasks: check jacocoTestReport
          publishJUnitResults: false
          jdkVersionOption: '1.11'
          sonarQubeRunAnalysis: true
          sqGradlePluginVersionChoice: 'build'
      - task: Gradle@2
        inputs:
          options: --stop
          tasks: c
          publishJUnitResults: false
          jdkVersionOption: '1.11'
        displayName: 'Stop Gradle daemon'
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: Run ITs
    stageDependencies: build
    jobs:
    - job: its
      displayName: Run ITs
      strategy:
        matrix:
          Idea2018:
            IDEA_VERSION: '2018.2'
            JDKVersion: '1.11'
          Idea2019:
            IDEA_VERSION: '2019.2'
            JDKVersion: '1.11'
      variables:
        GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
      steps:
      - checkout: self
        fetchDepth: 1
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"'
          restoreKeys: gradle
          path: $(GRADLE_USER_HOME)
        displayName: Gradle build cache
      - task: Gradle@2
        inputs:
          options: --build-cache --stacktrace -i -PijVersion=$(IDEA_VERSION)
          tasks: buildPlugin check
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JDKVersion)
        displayName: Build and run UTs with a different version of IntelliJ
      - task: Gradle@2
        inputs:
          options: --build-cache --stacktrace -i -p its
          tasks: check
          publishJUnitResults: true
          testRunTitle: 'Sanity checks'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JDKVersion)
        displayName: Run sanity checks
      - task: Gradle@2
        inputs:
          options: --stop
          tasks: c
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JDKVersion)
        displayName: 'Stop Gradle daemon'
- template: promote-stage.yml@commonTemplates
  parameters:
    stageDependencies:
    - validate
    - qa
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'dogfood'
    burgrType: 'dogfood'
    stageName: 'update_dogfood_repo'
    stageDisplayName: Update internal dogfooding plugin repo
    stageCondition: eq(variables['Build.SourceBranchName'], 'master')
    stageDependencies: promote
    jobs:
    - job: updateInternalSite
      displayName: Update internal plugin repo on repox
      steps:
        - checkout: none
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
        - bash: pip3 install requests
        - task: PythonScript@0
          name: updateInternalSiteOnRepox
          inputs:
            scriptSource: 'inline'
            script: |
              import requests
              import os
              import sys
              import json

              githubSlug = '$(Build.Repository.ID)'
              githubProject = githubSlug.split("/", 1)[1]
              buildNumber = '$(Build.BuildId)'

              buildInfoUrl = f'$(ARTIFACTORY_URL)/api/build/{githubProject}/{buildNumber}'
              buildInfoResp = requests.get(url=buildInfoUrl, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              buildInfoJson = buildInfoResp.json()

              buildInfo = buildInfoJson.get('buildInfo', {})
              buildInfoProperties = buildInfo.get('properties', {})

              # PROJECT_VERSION is set by the compute-build-version-step.yml
              version = buildInfoProperties.get('buildInfo.env.PROJECT_VERSION', 'NOT_FOUND')

              xml = f"""<plugins>
                <plugin id="org.sonarlint.idea" url="$(ARTIFACTORY_URL)/sonarsource/org/sonarsource/sonarlint/intellij/sonarlint-intellij/{version}/sonarlint-intellij-{version}.zip" version="{version}"/>
              </plugins>"""

              updatePluginsXmlUrl = "$(ARTIFACTORY_URL)/sonarsource-public-builds/org/sonarsource/sonarlint/intellij/sonarlint-intellij/updatePlugins.xml"
              response = requests.put(url=updatePluginsXmlUrl, data=xml, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              if not response.status_code == 201:
                sys.exit('[!] [{0}] Server Error'.format(response.status_code))

